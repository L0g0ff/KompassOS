## Author : Aditya Shakya (adi1090x)
## Mail : adi1090x@gmail.com
## Github : @adi1090x
## Reddit : @adi1090x
## Modified to support system functions

// Screen size
screen.w = Window.GetWidth(0);
screen.h = Window.GetHeight(0);
screen.half.w = Window.GetWidth(0) / 2;
screen.half.h = Window.GetHeight(0) / 2;

// Question prompt
question = null;
answer = null;

// Message
message = null;

// Password prompt
bullets = null;
prompt = null;
bullet.image = Image.Text("*", 1, 1, 1);

// Flow
state.status = "play";
state.time = 0.0;

// System status variabelen
status = "normal";
progress = 0;
is_updating = false;
is_upgrading = false;
is_firmware_upgrading = false;
is_resetting = false;
progress_bar_enabled = false;
show_percentage = false;
message_suppress = false;
current_title = "";
current_subtitle = "";

//--------------------------------- Refresh (Logo animation) --------------------------

# cycle through all images
for (i = 0; i < 192; i++)
  flyingman_image[i] = Image("progress-" + i + ".png");
flyingman_sprite = Sprite();

# set image position
flyingman_sprite.SetX(Window.GetX() + (Window.GetWidth(0) / 2 - flyingman_image[0].GetWidth() / 2)); # Place images in the center
flyingman_sprite.SetY(Window.GetY() + (Window.GetHeight(0) / 2 - flyingman_image[0].GetHeight() / 2));

// Progress bar functionaliteit
progress_bar_sprite = null;
percentage_sprite = null;
title_sprite = null;
subtitle_sprite = null;

fun draw_progress_bar() {
    if (progress_bar_enabled) {
        bar_width = screen.w * 0.6;
        bar_height = 20;
        
        // Achtergrond van de progress bar
        background_bar = Image.Rectangle(bar_width, bar_height, 0x606060);
        progress_bar_background = Sprite(background_bar);
        progress_bar_background.SetX(screen.half.w - bar_width / 2);
        progress_bar_background.SetY(screen.half.h + 50);
        
        // Voortgang van de progress bar
        if (Plymouth.GetMode() != "boot" || progress < 0.1)
            progress = 0.1;
        if (progress > 1.0)
            progress = 1.0;
            
        foreground_width = bar_width * progress;
        foreground_bar = Image.Rectangle(foreground_width, bar_height, 0xffffff);
        progress_bar_sprite = Sprite(foreground_bar);
        progress_bar_sprite.SetX(screen.half.w - bar_width / 2);
        progress_bar_sprite.SetY(screen.half.h + 50);
        
        // Percentage tekst als dat ingeschakeld is
        if (show_percentage) {
            percentage_text = Math.Int(progress * 100) + "%";
            percentage_image = Image.Text(percentage_text, 1, 1, 1);
            if (percentage_sprite != null)
                percentage_sprite.SetImage(percentage_image);
            else {
                percentage_sprite = Sprite(percentage_image);
                percentage_sprite.SetX(screen.half.w - percentage_image.GetWidth() / 2);
                percentage_sprite.SetY(screen.half.h + 50 + bar_height + 10);
            }
        }
        
        // Titel en subtitel
        if (current_title != "") {
            title_image = Image.Text(current_title, 1, 1, 1);
            if (title_sprite != null)
                title_sprite.SetImage(title_image);
            else {
                title_sprite = Sprite(title_image);
                title_sprite.SetX(screen.half.w - title_image.GetWidth() / 2);
                title_sprite.SetY(screen.half.h - 50);
            }
        }
        
        if (current_subtitle != "") {
            subtitle_image = Image.Text(current_subtitle, 1, 1, 1);
            if (subtitle_sprite != null)
                subtitle_sprite.SetImage(subtitle_image);
            else {
                subtitle_sprite = Sprite(subtitle_image);
                subtitle_sprite.SetX(screen.half.w - subtitle_image.GetWidth() / 2);
                subtitle_sprite.SetY(screen.half.h - 20);
            }
        }
    }
}

animation_progress = 0;
fun refresh_callback() {
    if (state.status == "play") {
        flyingman_sprite.SetImage(flyingman_image[Math.Int(animation_progress / 3) % 192]);
        animation_progress++;
    }
    
    // Teken de progress bar als die ingeschakeld is
    if (progress_bar_enabled) {
        draw_progress_bar();
    }
}
  
Plymouth.SetRefreshFunction(refresh_callback);

//------------------------------------- Question prompt -------------------------------
fun DisplayQuestionCallback(prompt, entry) {
    question = null;
    answer = null;

    if (entry == "")
        entry = "<answer>";

    question.image = Image.Text(prompt, 1, 1, 1);
    question.sprite = Sprite(question.image);
    question.sprite.SetX(screen.half.w - question.image.GetWidth() / 2);
    question.sprite.SetY(screen.h - 4 * question.image.GetHeight());

    answer.image = Image.Text(entry, 1, 1, 1);
    answer.sprite = Sprite(answer.image);
    answer.sprite.SetX(screen.half.w - answer.image.GetWidth() / 2);
    answer.sprite.SetY(screen.h - 2 * answer.image.GetHeight());
}
Plymouth.SetDisplayQuestionFunction(DisplayQuestionCallback);

//------------------------------------- Password prompt -------------------------------
fun DisplayPasswordCallback(nil, bulletCount) {
    state.status = "pause";
    totalWidth = bulletCount * bullet.image.GetWidth();
    startPos = screen.half.w - totalWidth / 2;

    prompt.image = Image.Text("Enter Password", 1, 1, 1);
    prompt.sprite = Sprite(prompt.image);
    prompt.sprite.SetX(screen.half.w - prompt.image.GetWidth() / 2);
    prompt.sprite.SetY(screen.h - 4 * prompt.image.GetHeight());

    // Clear all bullets (user might hit backspace)
    bullets = null;
    for (i = 0; i < bulletCount; i++) {
        bullets[i].sprite = Sprite(bullet.image);
        bullets[i].sprite.SetX(startPos + i * bullet.image.GetWidth());
        bullets[i].sprite.SetY(screen.h - 2 * bullet.image.GetHeight());
    }
}
Plymouth.SetDisplayPasswordFunction(DisplayPasswordCallback);

//--------------------------- Normal display (unset all text) ----------------------
fun DisplayNormalCallback() {
    state.status = "play";
    bullets = null;
    prompt = null;
    message = null;
    question = null;
    answer = null;
}
Plymouth.SetDisplayNormalFunction(DisplayNormalCallback);

//----------------------------------------- Message --------------------------------
fun MessageCallback(text) {
    if (!message_suppress) {
        message.image = Image.Text(text, 1, 1, 1);
        message.sprite = Sprite(message.image);
        message.sprite.SetPosition(screen.half.w - message.image.GetWidth() / 2, message.image.GetHeight());
    }
}
Plymouth.SetMessageFunction(MessageCallback);

//-------------------------- System update status functies -----------------------
fun UpdateStatusCallback(status) {
    if (status == "updates") {
        is_updating = true;
        progress_bar_enabled = true;
        show_percentage = true;
        message_suppress = true;
        current_title = "Installing Updates...";
        current_subtitle = "Do not turn off your computer";
    }
    else if (status == "system-upgrade") {
        is_upgrading = true;
        progress_bar_enabled = true;
        show_percentage = true;
        message_suppress = true;
        current_title = "Upgrading System...";
        current_subtitle = "Do not turn off your computer";
    }
    else if (status == "firmware-upgrade") {
        is_firmware_upgrading = true;
        progress_bar_enabled = true;
        show_percentage = true;
        message_suppress = true;
        current_title = "Upgrading Firmware...";
        current_subtitle = "Do not turn off your computer";
    }
    else if (status == "system-reset") {
        is_resetting = true;
        progress_bar_enabled = true;
        show_percentage = true;
        message_suppress = true;
        current_title = "Resetting System...";
        current_subtitle = "Do not turn off your computer";
    }
}
Plymouth.SetUpdateStatusFunction(UpdateStatusCallback);

//-------------------------- System progress functies -----------------------
fun SystemUpdateProgressCallback(progress_amount) {
    progress = progress_amount;
}
Plymouth.SetSystemUpdateProgressFunction(SystemUpdateProgressCallback);

//-------------------------- Boot progress functies -----------------------
fun BootProgressCallback(progress_amount) {
    progress = progress_amount;
}
Plymouth.SetBootProgressFunction(BootProgressCallback);

//-------------------------- Root mounted functie -----------------------
fun RootMountedCallback() {
    status = "normal";
}
Plymouth.SetRootMountedFunction(RootMountedCallback);

//-------------------------- Quit functie -----------------------
fun QuitCallback() {
    title_sprite = null;
    subtitle_sprite = null;
    percentage_sprite = null;
    progress_bar_sprite = null;
    flyingman_sprite = null;
}
Plymouth.SetQuitFunction(QuitCallback);